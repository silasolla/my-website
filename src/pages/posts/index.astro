---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { getTranslation } from '../../i18n/translations';
import { getSiteName } from '../../i18n/utils';

const allPosts = await getCollection('posts', (post) => {
  // 日本語版：lang が 'ja' または未定義の記事のみ
  return post.data.lang === 'ja' || post.data.lang === undefined;
});
const sortedPosts = allPosts.sort((a, b) => {
  const dateDiff = b.data.date.getTime() - a.data.date.getTime();
  if (dateDiff !== 0) return dateDiff;
  return b.slug.localeCompare(a.slug); // 同じ日付の場合はslugで降順ソート
});

const postsTitle = getTranslation(Astro.currentLocale, 'posts.title');
const allPostsText = getTranslation(Astro.currentLocale, 'posts.all');
const filterByTagText = getTranslation(Astro.currentLocale, 'posts.filter-by-tag');
const showAllText = getTranslation(Astro.currentLocale, 'posts.show-all');
const noPostsText = getTranslation(Astro.currentLocale, 'posts.no-posts');
const rssText = getTranslation(Astro.currentLocale, 'posts.rss');
const rssAllText = getTranslation(Astro.currentLocale, 'posts.rss-all');
const rssNewsText = getTranslation(Astro.currentLocale, 'posts.rss-news');
const rssTechText = getTranslation(Astro.currentLocale, 'posts.rss-tech');
const rssDiaryText = getTranslation(Astro.currentLocale, 'posts.rss-diary');

const newsTag = getTranslation(Astro.currentLocale, 'tag.news');
const techTag = getTranslation(Astro.currentLocale, 'tag.tech');
const diaryTag = getTranslation(Astro.currentLocale, 'tag.diary');

const filterToggleOpen = getTranslation(Astro.currentLocale, 'filter.toggle.open');
const filterToggleClose = getTranslation(Astro.currentLocale, 'filter.toggle.close');

const siteName = getSiteName(Astro.currentLocale);
---

<Layout
  title={`${postsTitle} - ${siteName}`}
  description={getTranslation(Astro.currentLocale, 'posts.description')}
>
  <article class="posts-page">
    <div class="page-header">
      <h2 class="page-title">{allPostsText}</h2>

      <button
        id="filter-toggle"
        class="filter-toggle"
        aria-label={filterToggleOpen}
        data-open-label={filterToggleOpen}
        data-close-label={filterToggleClose}
      >
        <span>絞り込み・RSS</span>
        <svg
          class="toggle-icon"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </button>

      <div class="filters-container" id="filters-container">
        <div class="rss-section">
          <span class="section-label">{rssText}:</span>
          <div class="rss-links">
            <a href="/rss.xml" class="rss-link" title={rssAllText}>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path
                  d="M6.18 15.64a2.18 2.18 0 0 1 2.18 2.18C8.36 19 7.38 20 6.18 20C5 20 4 19 4 17.82a2.18 2.18 0 0 1 2.18-2.18M4 4.44A15.56 15.56 0 0 1 19.56 20h-2.83A12.73 12.73 0 0 0 4 7.27V4.44m0 5.66a9.9 9.9 0 0 1 9.9 9.9h-2.83A7.07 7.07 0 0 0 4 12.93V10.1z"
                ></path>
              </svg>
              {showAllText}
            </a>
          </div>
          <div class="rss-categories">
            <a href="/rss/news.xml" class="rss-link" title={rssNewsText}>{newsTag}</a>
            <a href="/rss/tech.xml" class="rss-link" title={rssTechText}>{techTag}</a>
            <a href="/rss/diary.xml" class="rss-link" title={rssDiaryText}>{diaryTag}</a>
          </div>
        </div>

        <div class="filter-section">
          <span class="section-label">{filterByTagText}:</span>
          <div class="tag-filter-row">
            <button class="tag-button active" data-tag="all">{showAllText}</button>
          </div>
          <div class="tag-filter-row">
            <button class="tag-button" data-tag="news">{newsTag}</button>
            <button class="tag-button" data-tag="tech">{techTag}</button>
            <button class="tag-button" data-tag="diary">{diaryTag}</button>
          </div>
        </div>
      </div>
    </div>

    {
      sortedPosts.length === 0 ? (
        <p class="no-posts">{noPostsText}</p>
      ) : (
        <div class="posts-list">
          {sortedPosts.map((post) => (
            <article class="post-item" data-tags={post.data.tags.join(',')}>
              <a href={`/posts/${post.slug}/`} class="post-link">
                <div class="post-meta">
                  <time datetime={post.data.date.toISOString()} class="post-date">
                    {post.data.date.toLocaleDateString('ja-JP', {
                      year: 'numeric',
                      month: '2-digit',
                      day: '2-digit',
                    })}
                  </time>
                  <div class="post-tags">
                    {post.data.tags.map((tag) => (
                      <span class={`tag tag-${tag}`}>
                        {tag === 'news' ? newsTag : tag === 'tech' ? techTag : diaryTag}
                      </span>
                    ))}
                  </div>
                </div>
                <h3 class="post-title">{post.data.title}</h3>
                {post.data.description && <p class="post-description">{post.data.description}</p>}
              </a>
            </article>
          ))}
        </div>
      )
    }
  </article>
</Layout>

<script>
  // フィルター開閉トグル
  const filterToggle = document.getElementById('filter-toggle');
  const filtersContainer = document.getElementById('filters-container');

  if (filterToggle && filtersContainer) {
    const openLabel = filterToggle.getAttribute('data-open-label') || 'Open filters';
    const closeLabel = filterToggle.getAttribute('data-close-label') || 'Close filters';

    filterToggle.addEventListener('click', () => {
      const isOpen = filtersContainer.classList.toggle('open');
      filterToggle.classList.toggle('open', isOpen);
      filterToggle.setAttribute('aria-label', isOpen ? closeLabel : openLabel);
    });
  }

  // タグフィルタリング
  const tagButtons = document.querySelectorAll('.tag-button');
  const postItems = document.querySelectorAll('.post-item');

  tagButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const selectedTag = button.getAttribute('data-tag');

      // アクティブボタンの切り替え
      tagButtons.forEach((btn) => btn.classList.remove('active'));
      button.classList.add('active');

      // 記事のフィルタリング
      postItems.forEach((item) => {
        const itemTags = item.getAttribute('data-tags')?.split(',') || [];
        const htmlItem = item as HTMLElement;
        if (selectedTag === 'all' || (selectedTag && itemTags.includes(selectedTag))) {
          htmlItem.style.display = 'block';
        } else {
          htmlItem.style.display = 'none';
        }
      });
    });
  });
</script>

<style>
  .posts-page {
    padding: 2rem 0;
  }

  .page-header {
    margin-bottom: 2rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--color-primary);
  }

  .page-title {
    font-size: 1.6rem;
    color: var(--color-primary-dark);
    margin-bottom: 0.75rem;
  }

  .filter-toggle {
    display: none;
    align-items: center;
    gap: 0.5rem;
    padding: 0.6rem 1rem;
    background: var(--color-bg-alt);
    color: var(--color-text);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    margin-bottom: 0.75rem;
    transition: all 0.2s ease;
  }

  .filter-toggle:hover {
    background: var(--color-primary-light);
    border-color: var(--color-primary);
  }

  .toggle-icon {
    transition: transform 0.3s ease;
  }

  .filter-toggle.open .toggle-icon {
    transform: rotate(180deg);
  }

  .filters-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .rss-links {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex-wrap: wrap;
    font-size: 0.85rem;
  }

  .rss-section,
  .filter-section {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .section-label {
    color: var(--color-text-light);
    font-weight: 500;
  }

  .rss-links,
  .rss-categories,
  .tag-filter-row {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .rss-link {
    display: inline-flex;
    align-items: center;
    gap: 0.35rem;
    padding: 0.35rem 0.75rem;
    background: var(--color-bg-alt);
    color: var(--color-primary);
    text-decoration: none;
    border-radius: 4px;
    border: 1px solid var(--color-border);
    transition: all 0.2s ease;
  }

  .rss-link:hover {
    background: var(--color-primary-light);
    border-color: var(--color-primary);
  }

  .rss-link svg {
    width: 14px;
    height: 14px;
  }

  .tag-button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    background: var(--color-bg);
    color: var(--color-text);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }

  .tag-button:hover {
    background: var(--color-primary-light);
    border-color: var(--color-primary);
  }

  .tag-button.active {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }

  .posts-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
    gap: 1.5rem;
  }

  .post-item {
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.2s ease;
    background: var(--color-bg);
    display: flex;
    flex-direction: column;
  }

  .post-item:hover {
    border-color: var(--color-primary);
    box-shadow: 0 4px 12px rgba(90, 138, 94, 0.1);
    transform: translateY(-2px);
  }

  .post-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .post-meta {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    flex-wrap: wrap;
  }

  .post-date {
    color: var(--color-text-light);
    font-size: 0.9rem;
    white-space: nowrap;
  }

  .post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  /* Tag styles inherited from global styles in Layout.astro */

  .post-title {
    font-size: 1.3rem;
    color: var(--color-primary-dark);
    margin-bottom: 0.5rem;
  }

  .post-description {
    color: var(--color-text-light);
    margin: 0;
    line-height: 1.6;
  }

  .no-posts {
    color: var(--color-text-light);
    font-style: italic;
    text-align: center;
    padding: 3rem 0;
  }

  @media (max-width: 768px) {
    .posts-list {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 640px) {
    .filter-toggle {
      display: flex;
    }

    .filters-container {
      display: none;
      padding-top: 0.75rem;
      border-top: 1px solid var(--color-border);
      margin-top: 0.75rem;
    }

    .filters-container.open {
      display: flex;
    }

    .rss-section,
    .filter-section {
      flex-direction: column;
      align-items: flex-start;
      width: 100%;
    }

    .section-label {
      width: 100%;
    }

    .rss-links,
    .rss-categories,
    .tag-filter-row {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .rss-link,
    .tag-button {
      flex-grow: 0;
      flex-shrink: 0;
    }

    .post-title {
      font-size: 1.1rem;
    }
  }
</style>
