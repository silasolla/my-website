---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { getTranslation } from '../../i18n/translations';

export async function getStaticPaths() {
  const allPosts = await getCollection('posts');
  return allPosts.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<'posts'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

function formatDate(date: Date): string {
  return date.toLocaleDateString('ja-JP', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

const newsTag = getTranslation(Astro.currentLocale, 'tag.news');
const techTag = getTranslation(Astro.currentLocale, 'tag.tech');
const diaryTag = getTranslation(Astro.currentLocale, 'tag.diary');

const shareTwitter = getTranslation(Astro.currentLocale, 'share.twitter');
const shareBluesky = getTranslation(Astro.currentLocale, 'share.bluesky');
const shareCopy = getTranslation(Astro.currentLocale, 'share.copy');

const siteName = getTranslation(Astro.currentLocale, 'site.name');
---

<Layout title={`${entry.data.title} - ${siteName}`} description={entry.data.description}>
  <div class="post-layout">
    <header class="article-header">
      <div class="article-tags">
        {
          entry.data.tags.map((tag) => (
            <span class={`tag tag-${tag}`}>
              {tag === 'news' ? newsTag : tag === 'tech' ? techTag : diaryTag}
            </span>
          ))
        }
      </div>
      <h2 class="article-title">{entry.data.title}</h2>
      <time class="article-date" datetime={entry.data.date.toISOString()}>
        {formatDate(entry.data.date)}
      </time>
    </header>

    <!-- PC版：サイドバー (目次とシェア) -->
    <aside class="sidebar-pc">
      <!-- 目次 (PC版：常に表示) -->
      <div class="toc-section">
        <h3 class="sidebar-title">目次</h3>
        <nav id="table-of-contents-pc" class="toc-nav"></nav>
      </div>

      <!-- シェア (PC版) -->
      <div class="share-section">
        <h3 class="sidebar-title">シェア</h3>
        <div class="share-buttons">
          <button class="share-button share-twitter" data-share="twitter" title={shareTwitter}>
            <img src="/icons/twitter.svg" alt="X" width="20" height="20" />
          </button>
          <button class="share-button share-bluesky" data-share="bluesky" title={shareBluesky}>
            <img src="/icons/bluesky.svg" alt="Bluesky" width="20" height="20" />
          </button>
          <button class="share-button share-copy" data-share="copy" title={shareCopy}>
            <img src="/icons/link.svg" alt="リンク" width="20" height="20" />
          </button>
        </div>
      </div>
    </aside>

    <!-- スマホ版：目次 (記事の前, デフォルト畳み込み) -->
    <aside class="toc-mobile">
      <details class="toc-details">
        <summary class="toc-summary">目次</summary>
        <nav id="table-of-contents-mobile" class="toc-nav"></nav>
      </details>
    </aside>

    <div class="article-content">
      <Content />
    </div>

    <!-- スマホ版：シェア (記事の後) -->
    <aside class="share-mobile">
      <h3 class="sidebar-title">シェア</h3>
      <div class="share-buttons">
        <button class="share-button share-twitter" data-share="twitter" title={shareTwitter}>
          <img src="/icons/twitter.svg" alt="X" width="20" height="20" />
        </button>
        <button class="share-button share-bluesky" data-share="bluesky" title={shareBluesky}>
          <img src="/icons/bluesky.svg" alt="Bluesky" width="20" height="20" />
        </button>
        <button class="share-button share-copy" data-share="copy" title={shareCopy}>
          <img src="/icons/link.svg" alt="リンク" width="20" height="20" />
        </button>
      </div>
    </aside>

    <nav class="article-nav">
      <a href="/posts" class="back-link">← 記事一覧に戻る</a>
    </nav>
  </div>

  <script>
    // 目次の自動生成
    document.addEventListener('DOMContentLoaded', () => {
      const content = document.querySelector('.article-content');
      const tocNavPC = document.getElementById('table-of-contents-pc');
      const tocNavMobile = document.getElementById('table-of-contents-mobile');

      if (content) {
        const headings = content.querySelectorAll('h2, h3');

        // 目次を生成する関数
        const generateTOC = (targetNav: HTMLElement | null, parentSection: HTMLElement | null) => {
          if (!targetNav) return;

          if (headings.length > 0) {
            const tocList = document.createElement('ul');
            tocList.className = 'toc-list';

            headings.forEach((heading, index) => {
              const id = heading.id || `heading-${index}`;
              if (!heading.id) heading.id = id;

              const li = document.createElement('li');
              li.className = heading.tagName === 'H3' ? 'toc-item toc-item-h3' : 'toc-item';

              const a = document.createElement('a');
              a.href = `#${id}`;
              a.textContent = heading.textContent;
              a.className = 'toc-link';

              li.appendChild(a);
              tocList.appendChild(li);
            });

            targetNav.appendChild(tocList);
          } else {
            // 目次が無い場合は、目次セクション全体を非表示
            if (parentSection) {
              parentSection.style.display = 'none';
            }
          }
        };

        // PC版とモバイル版の両方に目次を生成
        const tocSectionPC = document.querySelector(
          '.sidebar-pc .toc-section'
        ) as HTMLElement | null;
        const tocSectionMobile = document.querySelector('.toc-mobile') as HTMLElement | null;

        generateTOC(tocNavPC, tocSectionPC);
        generateTOC(tocNavMobile, tocSectionMobile);
      }

      // シェア機能
      const shareButtons = document.querySelectorAll('.share-button');
      const currentUrl = window.location.href;
      const title = document.querySelector('.article-title')?.textContent || '';

      shareButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const shareType = button.getAttribute('data-share');

          switch (shareType) {
            case 'twitter':
              window.open(
                `https://twitter.com/intent/tweet?url=${encodeURIComponent(currentUrl)}&text=${encodeURIComponent(title)}`,
                '_blank',
                'width=550,height=420'
              );
              break;
            case 'bluesky':
              window.open(
                `https://bsky.app/intent/compose?text=${encodeURIComponent(title + ' ' + currentUrl)}`,
                '_blank',
                'width=550,height=600'
              );
              break;
            case 'copy':
              navigator.clipboard.writeText(currentUrl).then(() => {
                button.classList.add('copied');
                setTimeout(() => button.classList.remove('copied'), 2000);
              });
              break;
          }
        });
      });
    });
  </script>
</Layout>

<style is:global>
  .post-layout {
    display: grid;
    grid-template-columns: 1fr 280px;
    grid-template-areas:
      'header header'
      'content sidebar'
      'nav nav';
    gap: 0 3rem;
    max-width: 1400px;
    margin: 0 auto;
    padding: 1rem 0;
  }

  /* PC版サイドバー */
  .sidebar-pc {
    grid-area: sidebar;
    position: sticky;
    top: 2rem;
    align-self: start;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  /* スマホ版要素 (PC 版では非表示)_ */
  .toc-mobile,
  .share-mobile {
    display: none;
  }

  .toc-section {
    background: var(--color-bg-alt);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
  }

  .article-content {
    grid-area: content;
    min-width: 0;
  }

  .share-section {
    background: var(--color-bg-alt);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
  }

  .article-nav {
    grid-area: nav;
    margin-top: 2rem;
  }

  .toc-details {
    border: none;
  }

  .toc-summary {
    font-size: 1.1rem;
    color: var(--color-primary-dark);
    font-weight: 600;
    cursor: pointer;
    list-style: none;
    margin-bottom: 1rem;
  }

  .toc-summary::-webkit-details-marker {
    display: none;
  }

  .toc-summary::after {
    content: ' ▼';
  }

  .toc-details[open] .toc-summary::after {
    content: ' ▲';
  }

  .sidebar-title {
    font-size: 1.1rem;
    color: var(--color-primary-dark);
    margin-bottom: 1rem;
    font-weight: 600;
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-item {
    margin-bottom: 0.5rem;
  }

  .toc-item-h3 {
    margin-left: 1rem;
  }

  .toc-link {
    color: var(--color-text);
    text-decoration: none;
    font-size: 0.9rem;
    line-height: 1.5;
    display: block;
    padding: 0.25rem 0;
    transition: color 0.2s ease;
  }

  .toc-link:hover {
    color: var(--color-primary);
  }

  .share-buttons {
    display: flex;
    gap: 0.75rem;
  }

  .share-button {
    flex: 1;
    padding: 0.75rem;
    background: var(--color-primary);
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .share-button:hover {
    background: var(--color-primary-dark);
    transform: translateY(-2px);
  }

  .share-button img {
    filter: brightness(0) invert(1);
  }

  .share-button.copied {
    background: var(--color-success, #4caf50);
  }

  .share-button.copied img {
    filter: brightness(0) invert(1);
  }

  /* 記事ヘッダー・タグ・コンテンツ */

  .article-header {
    grid-area: header;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid var(--color-border);
  }

  .article-tags {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  /* Tag padding override for article page */
  .tag {
    padding: 0.3rem 0.9rem;
  }

  .article-title {
    font-size: 2rem;
    color: var(--color-primary-dark);
    margin-bottom: 0.5rem;
    line-height: 1.3;
  }

  .article-date {
    display: block;
    color: var(--color-text-light);
    font-size: 0.95rem;
  }

  .article-content {
    line-height: 1.8;
    color: var(--color-text);
  }

  .article-content h2 {
    font-size: 1.6rem;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    color: var(--color-primary-dark);
  }

  .article-content h3 {
    font-size: 1.3rem;
    margin-top: 2rem;
    margin-bottom: 0.8rem;
    color: var(--color-primary-dark);
  }

  .article-content p {
    margin-bottom: 1.2rem;
  }

  .article-content ul,
  .article-content ol {
    margin-bottom: 1.2rem;
    padding-left: 2rem;
  }

  .article-content li {
    margin-bottom: 0.5rem;
  }

  /* 引用 */
  .article-content blockquote {
    border-left: 4px solid var(--color-primary);
    background: var(--color-bg-alt);
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 4px;
    color: var(--color-text-light);
  }

  .article-content blockquote p:last-child {
    margin-bottom: 0;
  }

  /* 画像 */
  .article-content img {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 1.5rem auto;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  /* SP版：画像の最小幅を75%に設定 */
  @media (max-width: 768px) {
    .article-content img {
      min-width: 75%;
    }
  }

  /* PC版：画像サイズを制限 (width 属性がない場合のみ) */
  @media (min-width: 769px) {
    .article-content img:not([width]) {
      max-width: 700px;
    }
  }

  /* width属性が指定された画像 */
  .article-content img[width] {
    max-width: 100%;
  }

  /* インラインコード */
  .article-content code:not(pre code) {
    background: var(--color-bg-alt);
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.9em;
    font-family: 'Courier New', 'Monaco', 'Consolas', monospace;
    color: var(--color-text);
    border: 1px solid var(--color-border);
  }

  /* コードブロック (Shiki によるハイライト) */
  .article-content pre {
    padding: 1.2rem;
    border-radius: 8px;
    overflow-x: auto;
    margin-bottom: 1.5rem;
    border: 1px solid var(--color-border);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .article-content pre code {
    background: none;
    padding: 0;
    border: none;
    font-size: 1rem;
    line-height: 1.6;
  }

  .back-link {
    display: inline-block;
    color: var(--color-primary);
    text-decoration: none;
    padding: 0.6rem 1.2rem;
    border: 1px solid var(--color-border);
    border-radius: 6px;
    transition: all 0.2s ease;
  }

  .back-link:hover {
    background: var(--color-primary-light);
    border-color: var(--color-primary);
    text-decoration: none;
  }

  /* レスポンシブ: タブレット・スマホ (1024px以下) */

  @media (max-width: 1024px) {
    .post-layout {
      grid-template-columns: 1fr;
      grid-template-areas:
        'header'
        'toc'
        'content'
        'share'
        'nav';
      gap: 1rem 0;
    }

    /* タイトルと目次の間の余白を調整 */
    .article-header {
      margin-bottom: 0;
      padding-bottom: 0.75rem;
    }

    /* PC版サイドバーを非表示 */
    .sidebar-pc {
      display: none;
    }

    /* スマホ版要素を表示 */
    .toc-mobile {
      display: block;
      grid-area: toc;
      background: var(--color-bg-alt);
      border: 1px solid var(--color-border);
      border-radius: 8px;
      padding: 1rem;
    }

    /* 折りたたみ時の余白を削減 */
    .toc-mobile .toc-details:not([open]) {
      margin-bottom: 0;
    }

    .toc-mobile .toc-details:not([open]) .toc-summary {
      margin-bottom: 0;
    }

    .share-mobile {
      display: block;
      grid-area: share;
      background: var(--color-bg-alt);
      border: 1px solid var(--color-border);
      border-radius: 8px;
      padding: 1.5rem;
    }
  }

  /* レスポンシブ: スマホ (640px以下) */

  @media (max-width: 640px) {
    .article-title {
      font-size: 1.5rem;
    }

    .article-content {
      font-size: 0.95rem;
    }

    .article-content pre {
      padding: 0.8rem;
      font-size: 0.85rem;
    }
  }
</style>
