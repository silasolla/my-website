---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getTranslation } from '../../i18n/translations';

const allPosts = await getCollection('posts', (post) => {
  // Ëã±Ë™ûÁâàÔºölang „Åå 'en' „Åæ„Åü„ÅØÊú™ÂÆöÁæ©„ÅÆË®ò‰∫ã
  return post.data.lang === 'en' || post.data.lang === undefined;
});

// „Éî„É≥Áïô„ÇÅ„Åï„Çå„ÅüË®ò‰∫ã„Å®„Åù„Çå‰ª•Â§ñ„ÇíÂàÜÈõ¢
const pinnedPosts = allPosts
  .filter((post) => post.data.pinned)
  .sort((a, b) => {
    const dateDiff = b.data.date.getTime() - a.data.date.getTime();
    if (dateDiff !== 0) return dateDiff;
    return b.slug.localeCompare(a.slug); // Âêå„ÅòÊó•‰ªò„ÅÆÂ†¥Âêà„ÅØslug„ÅßÈôçÈ†Ü„ÇΩ„Éº„Éà
  });
const regularPosts = allPosts
  .filter((post) => !post.data.pinned)
  .sort((a, b) => {
    const dateDiff = b.data.date.getTime() - a.data.date.getTime();
    if (dateDiff !== 0) return dateDiff;
    return b.slug.localeCompare(a.slug); // Âêå„ÅòÊó•‰ªò„ÅÆÂ†¥Âêà„ÅØslug„ÅßÈôçÈ†Ü„ÇΩ„Éº„Éà
  });
const latestPosts = regularPosts.slice(0, 5);

const pageTitle = getTranslation(Astro.currentLocale, 'page.home');
const siteName = getTranslation(Astro.currentLocale, 'site.name');
const pinnedTitle = getTranslation(Astro.currentLocale, 'home.pinned');
const importantBadge = getTranslation(Astro.currentLocale, 'home.important');
const latestTitle = getTranslation(Astro.currentLocale, 'home.latest');
const noPostsText = getTranslation(Astro.currentLocale, 'home.no-posts');
const newsTag = getTranslation(Astro.currentLocale, 'tag.news');
const techTag = getTranslation(Astro.currentLocale, 'tag.tech');
const diaryTag = getTranslation(Astro.currentLocale, 'tag.diary');

function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}
---

<Layout
  title={`${pageTitle} - ${siteName}`}
  description="Personal website of Masaki Haga (@silasolla). Trust, but verify."
>
  {
    pinnedPosts.length > 0 && (
      <section class="pinned-section">
        <h2 class="section-title pinned-title">üìå {pinnedTitle}</h2>

        <ul class="posts-list pinned-posts">
          {pinnedPosts.map((post) => (
            <li class={`post-item ${post.data.important ? 'important-post' : ''}`}>
              <a href={`/en/posts/${post.slug}`} class="post-link">
                {post.data.important && <span class="important-badge">{importantBadge}</span>}
                <div class="post-meta">
                  <time class="post-date" datetime={post.data.date.toISOString()}>
                    {formatDate(post.data.date)}
                  </time>
                  <div class="post-tags">
                    {post.data.tags.map((tag) => (
                      <span class={`tag tag-${tag}`}>
                        {tag === 'news' ? newsTag : tag === 'tech' ? techTag : diaryTag}
                      </span>
                    ))}
                  </div>
                </div>
                <h3 class="post-title">{post.data.title}</h3>
                {post.data.description && <p class="post-description">{post.data.description}</p>}
              </a>
            </li>
          ))}
        </ul>
      </section>
    )
  }

  <section class="home-section">
    <h2 class="section-title">{latestTitle}</h2>

    {
      latestPosts.length === 0 ? (
        <p class="no-posts">{noPostsText}</p>
      ) : (
        <ul class="posts-list">
          {latestPosts.map((post) => (
            <li class="post-item">
              <a href={`/en/posts/${post.slug}`} class="post-link">
                <div class="post-meta">
                  <time class="post-date" datetime={post.data.date.toISOString()}>
                    {formatDate(post.data.date)}
                  </time>
                  <div class="post-tags">
                    {post.data.tags.map((tag) => (
                      <span class={`tag tag-${tag}`}>
                        {tag === 'news' ? newsTag : tag === 'tech' ? techTag : diaryTag}
                      </span>
                    ))}
                  </div>
                </div>
                <h3 class="post-title">{post.data.title}</h3>
                {post.data.description && <p class="post-description">{post.data.description}</p>}
              </a>
            </li>
          ))}
        </ul>
      )
    }
  </section>
</Layout>

<style>
  .pinned-section {
    padding: 2rem 0;
    margin-bottom: 1rem;
  }

  .pinned-title {
    color: var(--color-primary-dark);
    border-bottom: 2px solid #f59e0b;
  }

  .pinned-posts .post-item {
    border-left: 4px solid var(--color-primary);
  }

  .important-post {
    border-left-color: #ef4444 !important;
    background: linear-gradient(to right, rgba(239, 68, 68, 0.05), var(--color-bg-alt));
  }

  .important-badge {
    display: inline-block;
    background: #ef4444;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .home-section {
    padding: 2rem 0;
  }

  .section-title {
    font-size: 1.6rem;
    margin-bottom: 1.5rem;
    color: var(--color-primary-dark);
    border-bottom: 2px solid var(--color-primary);
    padding-bottom: 0.5rem;
  }

  .no-posts {
    color: var(--color-text-light);
    font-style: italic;
  }

  .posts-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
    gap: 1.5rem;
  }

  .post-item {
    background: var(--color-bg-alt);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
  }

  .post-item:hover {
    box-shadow: 0 4px 12px rgba(90, 138, 94, 0.15);
    border-color: var(--color-primary);
    transform: translateY(-2px);
  }

  .post-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .post-meta {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    flex-wrap: wrap;
  }

  .post-date {
    color: var(--color-text-light);
    font-size: 0.9rem;
    white-space: nowrap;
  }

  .post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  /* Tag font size override for home page */
  .tag {
    font-size: 0.75rem;
  }

  .post-title {
    font-size: 1.4rem;
    color: var(--color-primary-dark);
    margin-bottom: 0.5rem;
    transition: color 0.2s ease;
  }

  .post-item:hover .post-title {
    color: var(--color-primary);
  }

  .post-description {
    color: var(--color-text-light);
    margin: 0;
    line-height: 1.6;
  }

  @media (max-width: 768px) {
    .posts-list {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 640px) {
    .section-title {
      font-size: 1.5rem;
    }

    .post-item {
      padding: 1rem;
    }

    .post-title {
      font-size: 1.2rem;
    }
  }
</style>
