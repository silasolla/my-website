---
import Layout from '../../layouts/Layout.astro';

// 特別記事の一覧を取得してパスを生成
export async function getStaticPaths() {
  const dataBaseUrl = import.meta.env.PUBLIC_DATA_BASE_URL;

  if (!dataBaseUrl) {
    console.warn('[Special Articles] PUBLIC_DATA_BASE_URL is not set, generating placeholder only');
    return [{ params: { slug: '_placeholder' } }];
  }

  try {
    // 記事一覧を取得
    const response = await fetch(`${dataBaseUrl}/articles/index.json`);

    if (!response.ok) {
      console.warn(`[Special Articles] Failed to fetch index.json: ${response.status}`);
      return [{ params: { slug: '_placeholder' } }];
    }

    const data = await response.json();

    // 各記事のパスを生成
    if (!data.slugs || !Array.isArray(data.slugs)) {
      console.error('[Special Articles] Invalid index.json format: "slugs" array not found');
      return [{ params: { slug: '_placeholder' } }];
    }

    const paths = data.slugs.map((slug: string) => ({
      params: { slug },
    }));

    console.log(`[Special Articles] Generated ${paths.length} paths`);
    return paths;
  } catch (error) {
    console.error('[Special Articles] Error fetching articles:', error);
    return [{ params: { slug: '_placeholder' } }];
  }
}

const dataBaseUrl = import.meta.env.PUBLIC_DATA_BASE_URL;
---

<Layout
  title="特別記事"
  description="この記事は検索エンジンにインデックスされません"
  noIndex={true}
>
  <div id="special-article-root" class="loading" data-api-base={dataBaseUrl}>
    <div class="loader">
      <div class="spinner"></div>
      <p>読み込み中...</p>
    </div>
  </div>

  <script>
    // データ配信サイトのURL（data属性から取得）
    const DATA_BASE_URL =
      document.getElementById('special-article-root')?.getAttribute('data-api-base') || '';

    interface ArticleData {
      slug: string;
      title: string;
      content: string;
      category: string;
      categoryColor: string;
      date: string;
      meta?: {
        publishedAt: string;
        updatedAt: string;
      };
    }

    interface TwitterWidgets {
      load: () => void;
    }

    interface TwitterWindow extends Window {
      twttr?: {
        widgets: TwitterWidgets;
      };
    }

    declare const window: TwitterWindow;

    // URLからスラッグを取得
    function getSlugFromUrl(): string {
      const pathname = window.location.pathname;
      // /special/[slug] または /special/[slug]/ から slug を取得
      const match = pathname.match(/\/special\/([^/]+)\/?$/);
      return match ? match[1] : '';
    }

    // 記事をフェッチ
    async function loadSpecialArticle() {
      const slug = getSlugFromUrl();

      // プレースホルダーページの場合
      if (slug === '_placeholder' || !slug) {
        showError('記事が見つかりません', '記事のURLを確認してください。');
        return;
      }

      try {
        const response = await fetch(`${DATA_BASE_URL}/articles/${slug}.json`);

        if (!response.ok) {
          if (response.status === 404) {
            throw new Error('記事が見つかりませんでした');
          } else if (response.status === 403 || response.status === 401) {
            throw new Error('この記事にアクセスする権限がありません');
          } else {
            throw new Error(`エラーが発生しました (${response.status})`);
          }
        }

        const data: ArticleData = await response.json();

        // ページタイトルを更新
        document.title = `${data.title}`;

        renderArticle(data);
      } catch (error) {
        console.error('Error loading article:', error);
        const message = error instanceof Error ? error.message : '記事の読み込みに失敗しました';
        showError(message, 'ネットワーク接続を確認してください。');
      }
    }

    // 記事をレンダリング
    function renderArticle(data: ArticleData) {
      const root = document.getElementById('special-article-root');
      if (!root) return;

      root.className = '';
      root.innerHTML = `
        <div class="post-layout single-column">
          <header class="article-header">
            <div class="article-tags">
              <span class="tag" style="background-color: ${escapeHtml(data.categoryColor)}; color: white;">
                ${escapeHtml(data.category)}
              </span>
            </div>
            <h2 class="article-title">${escapeHtml(data.title)}</h2>
            <time class="article-date" datetime="${data.date}">
              ${formatDate(data.date)}
            </time>
          </header>

          <div class="article-content">
            ${data.content}
          </div>

          <nav class="article-nav">
            <a href="/" class="back-link">← トップに戻る</a>
          </nav>
        </div>
      `;

      // 画像の遅延読み込み設定
      setupLazyImages();

      // 外部リンクの処理
      setupExternalLinks();

      // Twitter埋め込みの処理
      loadTwitterEmbeds();
    }

    // エラー表示
    function showError(message: string, detail?: string) {
      const root = document.getElementById('special-article-root');
      if (!root) return;

      root.className = 'error-state';
      root.innerHTML = `
        <div class="error-container">
          <div class="error-icon">⚠️</div>
          <h2 class="error-title">${escapeHtml(message)}</h2>
          ${detail ? `<p class="error-detail">${escapeHtml(detail)}</p>` : ''}
          <div class="error-nav">
            <button class="retry-button" onclick="location.reload()">再読み込み</button>
            <a href="/" class="back-link">トップに戻る</a>
          </div>
        </div>
      `;
    }

    // HTMLエスケープ
    function escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // 日付のフォーマット（通常記事と同じ）
    function formatDate(dateString: string): string {
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ja-JP', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        });
      } catch (e) {
        return dateString;
      }
    }

    // 画像の遅延読み込み設定
    function setupLazyImages() {
      const images = document.querySelectorAll('.article-content img');

      if ('loading' in HTMLImageElement.prototype) {
        // ネイティブ lazy loading
        images.forEach((img) => {
          (img as HTMLImageElement).loading = 'lazy';
        });
      }
    }

    // 外部リンクの処理
    function setupExternalLinks() {
      const links = document.querySelectorAll('.article-content a[href^="http"]');

      links.forEach((link) => {
        const anchor = link as HTMLAnchorElement;
        const url = new URL(anchor.href);

        // 同一ドメインでない場合
        if (url.hostname !== window.location.hostname) {
          anchor.target = '_blank';
          anchor.rel = 'noopener noreferrer';
        }
      });
    }

    // Twitter埋め込みの自動読み込み
    function loadTwitterEmbeds() {
      const tweets = document.querySelectorAll('.twitter-tweet');

      // ツイートがない場合は何もしない
      if (tweets.length === 0) return;

      // 既にスクリプトが読み込まれている場合
      if (window.twttr && window.twttr.widgets) {
        window.twttr.widgets.load();
        return;
      }

      // Twitterウィジェットスクリプトを読み込む
      const script = document.createElement('script');
      script.src = 'https://platform.twitter.com/widgets.js';
      script.async = true;
      script.setAttribute('charset', 'utf-8');
      document.body.appendChild(script);
    }

    // ページ読み込み時に実行
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadSpecialArticle);
    } else {
      loadSpecialArticle();
    }
  </script>
</Layout>

<style>
  /* ローディング状態 */
  .loading {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 60vh;
    padding: 4rem 2rem;
  }

  .loader {
    text-align: center;
  }

  .spinner {
    width: 48px;
    height: 48px;
    border: 4px solid var(--color-border);
    border-top-color: var(--color-primary);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .loader p {
    color: var(--color-text-light);
    font-size: 1rem;
  }

  /* エラー状態 */
  .error-state {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 60vh;
    padding: 4rem 2rem;
  }

  .error-container {
    text-align: center;
    max-width: 500px;
  }

  .error-icon {
    font-size: 4rem;
    margin-bottom: 1.5rem;
  }

  .error-title {
    font-size: 1.5rem;
    color: var(--color-text);
    margin-bottom: 1rem;
  }

  .error-detail {
    color: var(--color-text-light);
    margin-bottom: 2rem;
    font-size: 1rem;
  }

  .error-nav {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .retry-button {
    padding: 0.75rem 1.5rem;
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .retry-button:hover {
    background: var(--color-primary-dark);
    transform: translateY(-2px);
  }
</style>

<style is:global>
  /* 特別記事：単一カラムレイアウト（通常記事と同じスタイル） */
  .post-layout.single-column {
    display: block;
    max-width: 900px;
    margin: 0 auto;
    padding: 1rem 3rem;
  }

  @media (max-width: 1200px) {
    .post-layout.single-column {
      padding: 1rem 2rem;
    }
  }

  @media (max-width: 640px) {
    .post-layout.single-column {
      padding: 1rem 1rem;
    }
  }

  .post-layout.single-column .article-header {
    grid-area: unset;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid var(--color-border);
  }

  .post-layout.single-column .article-tags {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .post-layout.single-column .tag {
    padding: 0.3rem 0.9rem;
  }

  .post-layout.single-column .article-title {
    font-size: 2rem;
    color: var(--color-primary-dark);
    margin-bottom: 0.5rem;
    line-height: 1.3;
  }

  .post-layout.single-column .article-date {
    display: block;
    color: var(--color-text-light);
    font-size: 0.95rem;
  }

  .post-layout.single-column .article-content {
    grid-area: unset;
    line-height: 1.8;
    color: var(--color-text);
  }

  .post-layout.single-column .article-content ul,
  .post-layout.single-column .article-content ol {
    margin-bottom: 1.2rem;
    padding-left: 2rem;
  }

  .post-layout.single-column .article-content li {
    margin-bottom: 0.5rem;
  }

  .post-layout.single-column .article-nav {
    grid-area: unset;
    margin-top: 2rem;
  }

  /* レスポンシブ */
  @media (max-width: 640px) {
    .post-layout.single-column .article-title {
      font-size: 1.5rem;
    }
  }
</style>
