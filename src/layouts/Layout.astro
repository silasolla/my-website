---
import Header from '../components/Header.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import { getCurrentLocale, getTranslation } from '../i18n/translations';

interface Props {
  title: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const locale = getCurrentLocale(Astro.currentLocale);
const defaultDescription = getTranslation(Astro.currentLocale, 'site.description');
const siteTitle = getTranslation(Astro.currentLocale, 'site.title');

const { title, description = defaultDescription, image, noIndex = false } = Astro.props;

// 開発環境でのフォールバック用
const isDev = import.meta.env.DEV;
const imageBaseUrl = import.meta.env.IMAGE_BASE_URL || '';

// OGP用の絶対URL
const siteUrl = import.meta.env.SITE_URL || Astro.site?.toString() || 'http://localhost:4321';
const currentUrl = new URL(Astro.url.pathname, siteUrl).href;
const ogImage = image ? new URL(image, siteUrl).href : `${siteUrl}/avatar.png`;
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Masaki Haga (silasolla)" />

    <!-- Robots meta tag (特別記事用) -->
    {
      noIndex && (
        <>
          <meta name="robots" content="noindex, nofollow, noarchive" />
          <meta name="googlebot" content="noindex, nofollow" />
        </>
      )
    }

    <!-- Favicons -->
    <!-- Apple Touch Icons (iOS Safari) -->
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="apple-touch-icon" sizes="152x152" href="/apple-touch-icon-152x152.png" />
    <link rel="apple-touch-icon" sizes="120x120" href="/apple-touch-icon-120x120.png" />
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon.png" />
    <!-- Standard favicons -->
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <!-- Android/Chrome -->
    <link rel="icon" type="image/png" sizes="192x192" href="/android-chrome-192x192.png" />
    <link rel="icon" type="image/png" sizes="512x512" href="/android-chrome-512x512.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="theme-color" content="#5a8a5e" />

    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <!-- Canonical URL -->
    <link rel="canonical" href={currentUrl} />

    <!-- RSS Feeds -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title={getTranslation(Astro.currentLocale, 'rss.feed-title')}
      href="/rss.xml"
    />
    <link
      rel="alternate"
      type="application/rss+xml"
      title={getTranslation(Astro.currentLocale, 'rss.feed-title-news')}
      href="/rss/news.xml"
    />
    <link
      rel="alternate"
      type="application/rss+xml"
      title={getTranslation(Astro.currentLocale, 'rss.feed-title-tech')}
      href="/rss/tech.xml"
    />
    <link
      rel="alternate"
      type="application/rss+xml"
      title={getTranslation(Astro.currentLocale, 'rss.feed-title-diary')}
      href="/rss/diary.xml"
    />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={currentUrl} />
    <meta property="og:site_name" content={siteTitle} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@silasolla" />
    <meta name="twitter:creator" content="@silasolla" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />

    <!-- Theme initialization script (runs before page renders to prevent flash) -->
    <script is:inline>
      const getThemePreference = () => {
        const stored = localStorage.getItem('theme');
        if (stored) return stored;
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };

      const theme = getThemePreference();
      document.documentElement.setAttribute('data-theme', theme);

      window.addEventListener('DOMContentLoaded', () => {
        const toggleButton = document.getElementById('theme-toggle');
        if (toggleButton) {
          toggleButton.addEventListener('click', () => {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
          });
        }
      });
    </script>

    <!-- 開発環境での画像フォールバック -->
    <script>
      // 開発環境での画像フォールバック（data属性から取得）
      const isDev = document.body.getAttribute('data-dev') === 'true';
      const imageBaseUrl = document.body.getAttribute('data-image-base') || '';

      if (isDev && imageBaseUrl) {
        function setupImageFallback() {
          const images = document.querySelectorAll('.article-content img');

          images.forEach((img) => {
            const imageElement = img as HTMLImageElement;
            if (!imageElement.src.startsWith(imageBaseUrl)) {
              return;
            }

            function attemptFallback() {
              if (imageElement.dataset.fallbackAttempted) {
                return;
              }

              imageElement.dataset.fallbackAttempted = 'true';

              // R2 の URL からローカルパスに変換
              const path = imageElement.src.replace(imageBaseUrl + '/posts/', '');
              const localSrc = '/posts/images/' + path;

              imageElement.src = localSrc;
            }

            // 既にロード失敗している場合 (complete だが naturalWidth が 0)
            if (imageElement.complete && imageElement.naturalWidth === 0) {
              attemptFallback();
            } else {
              // エラーイベントを監視
              imageElement.addEventListener('error', attemptFallback, { once: true });
            }
          });
        }

        // DOM が既に読み込まれている場合は即実行
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', setupImageFallback);
        } else {
          setupImageFallback();
        }
      }
    </script>
  </head>
  <body data-dev={isDev} data-image-base={imageBaseUrl}>
    <Header />
    <main class="main-content">
      <div class="container">
        <Navigation />
        <slot />
      </div>
    </main>
    <Footer />
  </body>
</html>

<style is:global>
  :root {
    /* Light theme */
    --color-primary: #5a8a5e;
    --color-primary-dark: #2a4a2d;
    --color-primary-light: #e8f0e9;
    --color-text: #1a2a1c;
    --color-text-light: #4a5a4e;
    --color-border: #c8d5ca;
    --color-bg: #fafbfa;
    --color-bg-alt: #f2f5f3;
  }

  [data-theme='dark'] {
    /* Dark theme */
    --color-primary: #7fad82;
    --color-primary-dark: #9bc29e;
    --color-primary-light: #1e2d20;
    --color-text: #d4e0d6;
    --color-text-light: #a0b3a3;
    --color-border: #2d3e2f;
    --color-bg: #15181a;
    --color-bg-alt: #1d2122;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html {
    font-family:
      -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans',
      sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
    background: var(--color-bg);
    color: var(--color-text);
    line-height: 1.7;
    font-size: 16px;
    transition:
      background-color 0.3s ease,
      color 0.3s ease;
  }

  body {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .main-content {
    flex: 1;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 3rem;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    color: var(--color-primary-dark);
    line-height: 1.4;
    margin-bottom: 1rem;
  }

  h1 {
    font-size: 2rem;
  }

  h2 {
    font-size: 1.6rem;
  }

  h3 {
    font-size: 1.3rem;
  }

  a {
    color: var(--color-primary);
    text-decoration: none;
  }

  a:hover {
    text-decoration: underline;
  }

  p {
    margin-bottom: 1rem;
  }

  /* Tag styles (global for consistency) */
  .tag {
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: 500;
  }

  .tag-news {
    background: #e3f2fd;
    color: #1976d2;
  }

  [data-theme='dark'] .tag-news {
    background: #1e3a5f;
    color: #90caf9;
  }

  .tag-tech {
    background: #f3e5f5;
    color: #7b1fa2;
  }

  [data-theme='dark'] .tag-tech {
    background: #4a1f5f;
    color: #ce93d8;
  }

  .tag-diary {
    background: #fff3e0;
    color: #e65100;
  }

  [data-theme='dark'] .tag-diary {
    background: #5f3a1e;
    color: #ffb74d;
  }

  @media (max-width: 1200px) {
    .container {
      padding: 0 2rem;
    }
  }

  @media (max-width: 640px) {
    html {
      font-size: 16px;
    }

    .container {
      padding: 0 1rem;
    }

    h1 {
      font-size: 1.8rem;
    }

    h2 {
      font-size: 1.5rem;
    }

    h3 {
      font-size: 1.3rem;
    }

    p {
      font-size: 1rem;
    }
  }
</style>
